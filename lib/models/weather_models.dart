class CurrentWeather {
  final double temperature;
  final double apparentTemperature;
  final int weatherCode;
  final double windSpeed;
  final double humidity;
  final bool isDay;

  CurrentWeather({
    required this.temperature,
    required this.apparentTemperature,
    required this.weatherCode,
    required this.windSpeed,
    required this.humidity,
    required this.isDay,
  });

  factory CurrentWeather.fromJson(Map<String, dynamic> json) {
    final c = json['current'] as Map<String, dynamic>;
    return CurrentWeather(
      temperature: (c['temperature_2m'] as num?)?.toDouble() ?? 0,
      apparentTemperature: (c['apparent_temperature'] as num?)?.toDouble() ?? 0,
      weatherCode: (c['weather_code'] as num?)?.toInt() ?? 0,
      windSpeed: (c['wind_speed_10m'] as num?)?.toDouble() ?? 0,
      humidity: (c['relative_humidity_2m'] as num?)?.toDouble() ?? 0,
      isDay: ((c['is_day'] as num?)?.toInt() ?? 1) == 1,
    );
  }
}

class HourlyPoint {
  final DateTime time;
  final double temperature;
  final double windSpeed;
  final int weatherCode;
  final double? humidity;
  final int? precipitationProb;

  HourlyPoint({
    required this.time,
    required this.temperature,
    required this.windSpeed,
    required this.weatherCode,
    this.humidity,
    this.precipitationProb,
  });
}

class DailyPoint {
  final DateTime date;
  final double tMax;
  final double tMin;
  final int weatherCode;
  final int? precipitationProbMax;
  final double? precipitationSum;

  DailyPoint({
    required this.date,
    required this.tMax,
    required this.tMin,
    required this.weatherCode,
    this.precipitationProbMax,
    this.precipitationSum,
  });
}

/// ‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
class WeatherBundle {
  final CurrentWeather current;
  final List<HourlyPoint> hourly; // ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏±‡∏î‡πÅ‡∏™‡∏î‡∏á 24-48 ‡∏ä‡∏°.‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏ó‡∏µ‡πà UI
  final List<DailyPoint> daily;   // 7 ‡∏ß‡∏±‡∏ô

  WeatherBundle({required this.current, required this.hourly, required this.daily});
}

/// ‡πÅ‡∏õ‡∏•‡∏á weather_code -> ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢
String weatherCodeToText(int code) {
  if (code == 0) return '‡∏ó‡πâ‡∏≠‡∏á‡∏ü‡πâ‡∏≤‡πÅ‡∏à‡πà‡∏°‡πÉ‡∏™';
  if ([1, 2, 3].contains(code)) return '‡∏°‡∏µ‡πÄ‡∏°‡∏Ü‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô/‡πÄ‡∏°‡∏Ü‡∏°‡∏≤‡∏Å';
  if ([45, 48].contains(code)) return '‡∏´‡∏°‡∏≠‡∏Å/‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á‡πÄ‡∏Å‡∏≤‡∏∞';
  if ([51, 53, 55].contains(code)) return '‡∏ù‡∏ô‡∏õ‡∏£‡∏≠‡∏¢‡πÜ';
  if ([61, 63, 65].contains(code)) return '‡∏ù‡∏ô‡∏ï‡∏Å';
  if ([66, 67].contains(code)) return '‡∏ù‡∏ô‡πÄ‡∏¢‡πá‡∏ô‡∏à‡∏±‡∏î';
  if ([71, 73, 75].contains(code)) return '‡∏´‡∏¥‡∏°‡∏∞‡∏ï‡∏Å';
  if (code == 77) return '‡∏´‡∏¥‡∏°‡∏∞‡πÄ‡∏Å‡∏•‡πá‡∏î‡πÅ‡∏Ç‡πá‡∏á';
  if ([80, 81, 82].contains(code)) return '‡∏ù‡∏ô‡∏ï‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÜ';
  if ([95].contains(code)) return '‡∏û‡∏≤‡∏¢‡∏∏‡∏ù‡∏ô‡∏ü‡πâ‡∏≤‡∏Ñ‡∏∞‡∏ô‡∏≠‡∏á';
  if ([96, 99].contains(code)) return '‡∏û‡∏≤‡∏¢‡∏∏‡∏ü‡πâ‡∏≤‡∏Ñ‡∏∞‡∏ô‡∏≠‡∏á‡∏•‡∏π‡∏Å‡πÄ‡∏´‡πá‡∏ö';
  return '‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡πÅ‡∏ô‡πà‡∏ä‡∏±‡∏î';
}

String emojiForCode(int code, bool isDay) {
  if (code == 0) return isDay ? '‚òÄÔ∏è' : 'üåô';
  if ([1, 2, 3].contains(code)) return '‚õÖ';
  if ([45, 48].contains(code)) return 'üå´Ô∏è';
  if ([51, 53, 55].contains(code)) return 'üå¶Ô∏è';
  if ([61, 63, 65, 80, 81, 82].contains(code)) return 'üåßÔ∏è';
  if ([95, 96, 99].contains(code)) return '‚õàÔ∏è';
  if ([71, 73, 75, 77].contains(code)) return '‚ùÑÔ∏è';
  return 'üå°Ô∏è';
}
